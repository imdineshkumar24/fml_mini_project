# -*- coding: utf-8 -*-
"""fmlminiipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tLwpGr3oSxTAdrOnPWosQXiCaw7oXmIy
"""

import pandas as pd
import numpy as np
df=pd.read_csv('/content/car_insurance_claim.csv')
df=df.dropna()
df.head()

df.columns

df['MSTATUS'].replace(['Yes','z_No'],
                        [1, 0], inplace=True)

df['REVOKED'].replace(['Yes','No'],
                        [1, 0], inplace=True)

kt=df["HOME_VAL"].tolist()
lt=df["OLDCLAIM"].tolist()

ks=[]
from re import sub
from decimal import Decimal
import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
for i in kt:
  ks.append(locale.atof(i.strip("$")))
df["HOME_VAL"]=ks

ls=[]
from re import sub
from decimal import Decimal
import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
for i in lt:
  ls.append(locale.atof(i.strip("$")))
df["OLDCLAIM"]=ls

x=df[["KIDSDRIV","HOMEKIDS","AGE","MVR_PTS","CLM_FREQ","CAR_AGE","HOME_VAL","OLDCLAIM","MSTATUS"]]
x

y=df["CLAIM_FLAG"]
y

y.value_counts()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=1)
x_test.head()

from sklearn.linear_model import LogisticRegression
Classifier=LogisticRegression(solver='liblinear')
Classifier.fit(x_train,y_train)

y_pred=Classifier.predict(x_test)
results=pd.DataFrame({'Actual':y_test,'Predictions':y_pred})
results.head(5)

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test,y_pred))

y_pred=Classifier.predict(x_train)
print(accuracy_score(y_train,y_pred))

from sklearn.tree import DecisionTreeClassifier
classifier=DecisionTreeClassifier()
classifier.fit(x_train,y_train)
y_pred = classifier.predict(x_test)

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test,y_pred)

from sklearn.metrics import classification_report

print(classification_report(y_test,y_pred))

from sklearn.naive_bayes import GaussianNB
np = GaussianNB()
np.fit(x_train,y_train)

y_pred2=np.predict(x_test)
from sklearn.metrics import confusion_matrix,classification_report
print(confusion_matrix(y_test,y_pred2))
print(classification_report(y_test,y_pred2))

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators = 100)
rf.fit(x_train,y_train)

y_pred3=rf.predict(x_test)
from sklearn.metrics import confusion_matrix,classification_report
print(confusion_matrix(y_test,y_pred3))
print(classification_report(y_test,y_pred3))

from xgboost import XGBClassifier
xgb_classifier = XGBClassifier()
xgb_classifier.fit(x_train,y_train)

y_pred4=xgb_classifier.predict(x_test)
from sklearn.metrics import confusion_matrix,classification_report
print(confusion_matrix(y_test,y_pred4))
print(classification_report(y_test,y_pred4))

